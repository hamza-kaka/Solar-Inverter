<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\SPWM_inverter.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\SPWM_inverter.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6120001: Last Updated: Wed Apr  8 17:17:03 2020
<BR><P>
<H3>Maximum Stack Usage =        376 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; FTM_SetupPwm &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[0]">Reset_Handler</a>
 <LI><a href="#[31]">ADC0_IRQHandler</a>
 <LI><a href="#[53]">ADC1_IRQHandler</a>
 <LI><a href="#[4]">BusFault_Handler</a>
 <LI><a href="#[32]">CMP0_IRQHandler</a>
 <LI><a href="#[33]">CMP1_IRQHandler</a>
 <LI><a href="#[42]">DAC0_IRQHandler</a>
 <LI><a href="#[52]">DAC1_IRQHandler</a>
 <LI><a href="#[73]">DMA_Error_DriverIRQHandler</a>
 <LI><a href="#[7]">DebugMon_Handler</a>
 <LI><a href="#[60]">DefaultISR</a>
 <LI><a href="#[1c]">FTF_IRQHandler</a>
 <LI><a href="#[34]">FTM0_IRQHandler</a>
 <LI><a href="#[35]">FTM1_IRQHandler</a>
 <LI><a href="#[36]">FTM2_IRQHandler</a>
 <LI><a href="#[74]">I2C0_DriverIRQHandler</a>
 <LI><a href="#[75]">I2C1_DriverIRQHandler</a>
 <LI><a href="#[1f]">LLWU_IRQHandler</a>
 <LI><a href="#[44]">LPTMR0_IRQHandler</a>
 <LI><a href="#[1e]">LVD_LVW_IRQHandler</a>
 <LI><a href="#[43]">MCG_IRQHandler</a>
 <LI><a href="#[1b]">MCM_IRQHandler</a>
 <LI><a href="#[3]">MemManage_Handler</a>
 <LI><a href="#[3e]">PDB0_IRQHandler</a>
 <LI><a href="#[3a]">PIT0_IRQHandler</a>
 <LI><a href="#[3b]">PIT1_IRQHandler</a>
 <LI><a href="#[3c]">PIT2_IRQHandler</a>
 <LI><a href="#[3d]">PIT3_IRQHandler</a>
 <LI><a href="#[45]">PORTA_IRQHandler</a>
 <LI><a href="#[46]">PORTB_IRQHandler</a>
 <LI><a href="#[47]">PORTC_IRQHandler</a>
 <LI><a href="#[48]">PORTD_IRQHandler</a>
 <LI><a href="#[49]">PORTE_IRQHandler</a>
 <LI><a href="#[21]">RNG_IRQHandler</a>
 <LI><a href="#[1d]">Read_Collision_IRQHandler</a>
 <LI><a href="#[5e]">Reserved100_IRQHandler</a>
 <LI><a href="#[5f]">Reserved101_IRQHandler</a>
 <LI><a href="#[26]">Reserved44_IRQHandler</a>
 <LI><a href="#[27]">Reserved45_IRQHandler</a>
 <LI><a href="#[2f]">Reserved53_IRQHandler</a>
 <LI><a href="#[30]">Reserved54_IRQHandler</a>
 <LI><a href="#[37]">Reserved61_IRQHandler</a>
 <LI><a href="#[38]">Reserved62_IRQHandler</a>
 <LI><a href="#[39]">Reserved63_IRQHandler</a>
 <LI><a href="#[3f]">Reserved69_IRQHandler</a>
 <LI><a href="#[40]">Reserved70_IRQHandler</a>
 <LI><a href="#[41]">Reserved71_IRQHandler</a>
 <LI><a href="#[4b]">Reserved81_IRQHandler</a>
 <LI><a href="#[4c]">Reserved82_IRQHandler</a>
 <LI><a href="#[4d]">Reserved83_IRQHandler</a>
 <LI><a href="#[4e]">Reserved84_IRQHandler</a>
 <LI><a href="#[4f]">Reserved85_IRQHandler</a>
 <LI><a href="#[50]">Reserved86_IRQHandler</a>
 <LI><a href="#[54]">Reserved90_IRQHandler</a>
 <LI><a href="#[55]">Reserved91_IRQHandler</a>
 <LI><a href="#[56]">Reserved92_IRQHandler</a>
 <LI><a href="#[57]">Reserved93_IRQHandler</a>
 <LI><a href="#[58]">Reserved94_IRQHandler</a>
 <LI><a href="#[59]">Reserved95_IRQHandler</a>
 <LI><a href="#[5a]">Reserved96_IRQHandler</a>
 <LI><a href="#[5b]">Reserved97_IRQHandler</a>
 <LI><a href="#[5c]">Reserved98_IRQHandler</a>
 <LI><a href="#[5d]">Reserved99_IRQHandler</a>
 <LI><a href="#[4a]">SWI_IRQHandler</a>
 <LI><a href="#[7a]">UART0_ERR_DriverIRQHandler</a>
 <LI><a href="#[7c]">UART1_ERR_DriverIRQHandler</a>
 <LI><a href="#[7e]">UART2_ERR_DriverIRQHandler</a>
 <LI><a href="#[5]">UsageFault_Handler</a>
 <LI><a href="#[20]">WDOG_EWM_IRQHandler</a>
 <LI><a href="#[1]">NMI_Handler</a>
 <LI><a href="#[2]">HardFault_Handler</a>
 <LI><a href="#[6]">SVC_Handler</a>
 <LI><a href="#[8]">PendSV_Handler</a>
 <LI><a href="#[9]">SysTick_Handler</a>
 <LI><a href="#[a]">DMA0_IRQHandler</a>
 <LI><a href="#[b]">DMA1_IRQHandler</a>
 <LI><a href="#[c]">DMA2_IRQHandler</a>
 <LI><a href="#[d]">DMA3_IRQHandler</a>
 <LI><a href="#[e]">DMA4_IRQHandler</a>
 <LI><a href="#[f]">DMA5_IRQHandler</a>
 <LI><a href="#[10]">DMA6_IRQHandler</a>
 <LI><a href="#[11]">DMA7_IRQHandler</a>
 <LI><a href="#[12]">DMA8_IRQHandler</a>
 <LI><a href="#[13]">DMA9_IRQHandler</a>
 <LI><a href="#[14]">DMA10_IRQHandler</a>
 <LI><a href="#[15]">DMA11_IRQHandler</a>
 <LI><a href="#[16]">DMA12_IRQHandler</a>
 <LI><a href="#[17]">DMA13_IRQHandler</a>
 <LI><a href="#[18]">DMA14_IRQHandler</a>
 <LI><a href="#[19]">DMA15_IRQHandler</a>
 <LI><a href="#[1a]">DMA_Error_IRQHandler</a>
 <LI><a href="#[22]">I2C0_IRQHandler</a>
 <LI><a href="#[23]">I2C1_IRQHandler</a>
 <LI><a href="#[24]">SPI0_IRQHandler</a>
 <LI><a href="#[25]">SPI1_IRQHandler</a>
 <LI><a href="#[28]">LPUART0_IRQHandler</a>
 <LI><a href="#[29]">UART0_RX_TX_IRQHandler</a>
 <LI><a href="#[2a]">UART0_ERR_IRQHandler</a>
 <LI><a href="#[2b]">UART1_RX_TX_IRQHandler</a>
 <LI><a href="#[2c]">UART1_ERR_IRQHandler</a>
 <LI><a href="#[2d]">UART2_RX_TX_IRQHandler</a>
 <LI><a href="#[2e]">UART2_ERR_IRQHandler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[b0]">DbgConsole_SendDataReliable</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9a]">__aeabi_assert</a><BR>
 <LI><a href="#[b4]">SerialManager_WriteBlocking</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9a]">__aeabi_assert</a><BR>
 <LI><a href="#[be]">Serial_UartWrite</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9a]">__aeabi_assert</a><BR>
 <LI><a href="#[bc]">HAL_UartSendBlocking</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9a]">__aeabi_assert</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[31]">ADC0_IRQHandler</a> from startup_mkv31f51212.o(.text) referenced from startup_mkv31f51212.o(.isr_vector)
 <LI><a href="#[53]">ADC1_IRQHandler</a> from startup_mkv31f51212.o(.text) referenced from startup_mkv31f51212.o(.isr_vector)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_mkv31f51212.o(.text) referenced from startup_mkv31f51212.o(.isr_vector)
 <LI><a href="#[32]">CMP0_IRQHandler</a> from startup_mkv31f51212.o(.text) referenced from startup_mkv31f51212.o(.isr_vector)
 <LI><a href="#[33]">CMP1_IRQHandler</a> from startup_mkv31f51212.o(.text) referenced from startup_mkv31f51212.o(.isr_vector)
 <LI><a href="#[42]">DAC0_IRQHandler</a> from startup_mkv31f51212.o(.text) referenced from startup_mkv31f51212.o(.isr_vector)
 <LI><a href="#[52]">DAC1_IRQHandler</a> from startup_mkv31f51212.o(.text) referenced from startup_mkv31f51212.o(.isr_vector)
 <LI><a href="#[63]">DMA0_DriverIRQHandler</a> from fsl_edma.o(.text.DMA0_DriverIRQHandler) referenced from startup_mkv31f51212.o(.text)
 <LI><a href="#[a]">DMA0_IRQHandler</a> from startup_mkv31f51212.o(.text) referenced from startup_mkv31f51212.o(.isr_vector)
 <LI><a href="#[6d]">DMA10_DriverIRQHandler</a> from fsl_edma.o(.text.DMA10_DriverIRQHandler) referenced from startup_mkv31f51212.o(.text)
 <LI><a href="#[14]">DMA10_IRQHandler</a> from startup_mkv31f51212.o(.text) referenced from startup_mkv31f51212.o(.isr_vector)
 <LI><a href="#[6e]">DMA11_DriverIRQHandler</a> from fsl_edma.o(.text.DMA11_DriverIRQHandler) referenced from startup_mkv31f51212.o(.text)
 <LI><a href="#[15]">DMA11_IRQHandler</a> from startup_mkv31f51212.o(.text) referenced from startup_mkv31f51212.o(.isr_vector)
 <LI><a href="#[6f]">DMA12_DriverIRQHandler</a> from fsl_edma.o(.text.DMA12_DriverIRQHandler) referenced from startup_mkv31f51212.o(.text)
 <LI><a href="#[16]">DMA12_IRQHandler</a> from startup_mkv31f51212.o(.text) referenced from startup_mkv31f51212.o(.isr_vector)
 <LI><a href="#[70]">DMA13_DriverIRQHandler</a> from fsl_edma.o(.text.DMA13_DriverIRQHandler) referenced from startup_mkv31f51212.o(.text)
 <LI><a href="#[17]">DMA13_IRQHandler</a> from startup_mkv31f51212.o(.text) referenced from startup_mkv31f51212.o(.isr_vector)
 <LI><a href="#[71]">DMA14_DriverIRQHandler</a> from fsl_edma.o(.text.DMA14_DriverIRQHandler) referenced from startup_mkv31f51212.o(.text)
 <LI><a href="#[18]">DMA14_IRQHandler</a> from startup_mkv31f51212.o(.text) referenced from startup_mkv31f51212.o(.isr_vector)
 <LI><a href="#[72]">DMA15_DriverIRQHandler</a> from fsl_edma.o(.text.DMA15_DriverIRQHandler) referenced from startup_mkv31f51212.o(.text)
 <LI><a href="#[19]">DMA15_IRQHandler</a> from startup_mkv31f51212.o(.text) referenced from startup_mkv31f51212.o(.isr_vector)
 <LI><a href="#[64]">DMA1_DriverIRQHandler</a> from fsl_edma.o(.text.DMA1_DriverIRQHandler) referenced from startup_mkv31f51212.o(.text)
 <LI><a href="#[b]">DMA1_IRQHandler</a> from startup_mkv31f51212.o(.text) referenced from startup_mkv31f51212.o(.isr_vector)
 <LI><a href="#[65]">DMA2_DriverIRQHandler</a> from fsl_edma.o(.text.DMA2_DriverIRQHandler) referenced from startup_mkv31f51212.o(.text)
 <LI><a href="#[c]">DMA2_IRQHandler</a> from startup_mkv31f51212.o(.text) referenced from startup_mkv31f51212.o(.isr_vector)
 <LI><a href="#[66]">DMA3_DriverIRQHandler</a> from fsl_edma.o(.text.DMA3_DriverIRQHandler) referenced from startup_mkv31f51212.o(.text)
 <LI><a href="#[d]">DMA3_IRQHandler</a> from startup_mkv31f51212.o(.text) referenced from startup_mkv31f51212.o(.isr_vector)
 <LI><a href="#[67]">DMA4_DriverIRQHandler</a> from fsl_edma.o(.text.DMA4_DriverIRQHandler) referenced from startup_mkv31f51212.o(.text)
 <LI><a href="#[e]">DMA4_IRQHandler</a> from startup_mkv31f51212.o(.text) referenced from startup_mkv31f51212.o(.isr_vector)
 <LI><a href="#[68]">DMA5_DriverIRQHandler</a> from fsl_edma.o(.text.DMA5_DriverIRQHandler) referenced from startup_mkv31f51212.o(.text)
 <LI><a href="#[f]">DMA5_IRQHandler</a> from startup_mkv31f51212.o(.text) referenced from startup_mkv31f51212.o(.isr_vector)
 <LI><a href="#[69]">DMA6_DriverIRQHandler</a> from fsl_edma.o(.text.DMA6_DriverIRQHandler) referenced from startup_mkv31f51212.o(.text)
 <LI><a href="#[10]">DMA6_IRQHandler</a> from startup_mkv31f51212.o(.text) referenced from startup_mkv31f51212.o(.isr_vector)
 <LI><a href="#[6a]">DMA7_DriverIRQHandler</a> from fsl_edma.o(.text.DMA7_DriverIRQHandler) referenced from startup_mkv31f51212.o(.text)
 <LI><a href="#[11]">DMA7_IRQHandler</a> from startup_mkv31f51212.o(.text) referenced from startup_mkv31f51212.o(.isr_vector)
 <LI><a href="#[6b]">DMA8_DriverIRQHandler</a> from fsl_edma.o(.text.DMA8_DriverIRQHandler) referenced from startup_mkv31f51212.o(.text)
 <LI><a href="#[12]">DMA8_IRQHandler</a> from startup_mkv31f51212.o(.text) referenced from startup_mkv31f51212.o(.isr_vector)
 <LI><a href="#[6c]">DMA9_DriverIRQHandler</a> from fsl_edma.o(.text.DMA9_DriverIRQHandler) referenced from startup_mkv31f51212.o(.text)
 <LI><a href="#[13]">DMA9_IRQHandler</a> from startup_mkv31f51212.o(.text) referenced from startup_mkv31f51212.o(.isr_vector)
 <LI><a href="#[73]">DMA_Error_DriverIRQHandler</a> from startup_mkv31f51212.o(.text) referenced from startup_mkv31f51212.o(.text)
 <LI><a href="#[1a]">DMA_Error_IRQHandler</a> from startup_mkv31f51212.o(.text) referenced from startup_mkv31f51212.o(.isr_vector)
 <LI><a href="#[7f]">DbgConsole_PrintCallback</a> from fsl_debug_console.o(.text.DbgConsole_PrintCallback) referenced from fsl_debug_console.o(.text.DbgConsole_Printf)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_mkv31f51212.o(.text) referenced from startup_mkv31f51212.o(.isr_vector)
 <LI><a href="#[60]">DefaultISR</a> from startup_mkv31f51212.o(.text) referenced from fsl_lpuart.o(.data.s_lpuartIsr)
 <LI><a href="#[60]">DefaultISR</a> from startup_mkv31f51212.o(.text) referenced from fsl_uart.o(.data.s_uartIsr)
 <LI><a href="#[60]">DefaultISR</a> from startup_mkv31f51212.o(.text) referenced 153 times from startup_mkv31f51212.o(.isr_vector)
 <LI><a href="#[1c]">FTF_IRQHandler</a> from startup_mkv31f51212.o(.text) referenced from startup_mkv31f51212.o(.isr_vector)
 <LI><a href="#[34]">FTM0_IRQHandler</a> from startup_mkv31f51212.o(.text) referenced from startup_mkv31f51212.o(.isr_vector)
 <LI><a href="#[35]">FTM1_IRQHandler</a> from startup_mkv31f51212.o(.text) referenced from startup_mkv31f51212.o(.isr_vector)
 <LI><a href="#[36]">FTM2_IRQHandler</a> from startup_mkv31f51212.o(.text) referenced from startup_mkv31f51212.o(.isr_vector)
 <LI><a href="#[51]">FTM3_IRQHandler</a> from plz_work.o(.text.FTM3_IRQHandler) referenced from startup_mkv31f51212.o(.isr_vector)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_mkv31f51212.o(.text) referenced from startup_mkv31f51212.o(.isr_vector)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_mkv31f51212.o(.text) referenced from startup_mkv31f51212.o(.text)
 <LI><a href="#[74]">I2C0_DriverIRQHandler</a> from startup_mkv31f51212.o(.text) referenced from startup_mkv31f51212.o(.text)
 <LI><a href="#[22]">I2C0_IRQHandler</a> from startup_mkv31f51212.o(.text) referenced from startup_mkv31f51212.o(.isr_vector)
 <LI><a href="#[75]">I2C1_DriverIRQHandler</a> from startup_mkv31f51212.o(.text) referenced from startup_mkv31f51212.o(.text)
 <LI><a href="#[23]">I2C1_IRQHandler</a> from startup_mkv31f51212.o(.text) referenced from startup_mkv31f51212.o(.isr_vector)
 <LI><a href="#[1f]">LLWU_IRQHandler</a> from startup_mkv31f51212.o(.text) referenced from startup_mkv31f51212.o(.isr_vector)
 <LI><a href="#[44]">LPTMR0_IRQHandler</a> from startup_mkv31f51212.o(.text) referenced from startup_mkv31f51212.o(.isr_vector)
 <LI><a href="#[78]">LPUART0_DriverIRQHandler</a> from fsl_lpuart.o(.text.LPUART0_DriverIRQHandler) referenced from startup_mkv31f51212.o(.text)
 <LI><a href="#[28]">LPUART0_IRQHandler</a> from startup_mkv31f51212.o(.text) referenced from startup_mkv31f51212.o(.isr_vector)
 <LI><a href="#[1e]">LVD_LVW_IRQHandler</a> from startup_mkv31f51212.o(.text) referenced from startup_mkv31f51212.o(.isr_vector)
 <LI><a href="#[43]">MCG_IRQHandler</a> from startup_mkv31f51212.o(.text) referenced from startup_mkv31f51212.o(.isr_vector)
 <LI><a href="#[1b]">MCM_IRQHandler</a> from startup_mkv31f51212.o(.text) referenced from startup_mkv31f51212.o(.isr_vector)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_mkv31f51212.o(.text) referenced from startup_mkv31f51212.o(.isr_vector)
 <LI><a href="#[1]">NMI_Handler</a> from startup_mkv31f51212.o(.text) referenced from startup_mkv31f51212.o(.isr_vector)
 <LI><a href="#[1]">NMI_Handler</a> from startup_mkv31f51212.o(.text) referenced from startup_mkv31f51212.o(.text)
 <LI><a href="#[3e]">PDB0_IRQHandler</a> from startup_mkv31f51212.o(.text) referenced from startup_mkv31f51212.o(.isr_vector)
 <LI><a href="#[3a]">PIT0_IRQHandler</a> from startup_mkv31f51212.o(.text) referenced from startup_mkv31f51212.o(.isr_vector)
 <LI><a href="#[3b]">PIT1_IRQHandler</a> from startup_mkv31f51212.o(.text) referenced from startup_mkv31f51212.o(.isr_vector)
 <LI><a href="#[3c]">PIT2_IRQHandler</a> from startup_mkv31f51212.o(.text) referenced from startup_mkv31f51212.o(.isr_vector)
 <LI><a href="#[3d]">PIT3_IRQHandler</a> from startup_mkv31f51212.o(.text) referenced from startup_mkv31f51212.o(.isr_vector)
 <LI><a href="#[45]">PORTA_IRQHandler</a> from startup_mkv31f51212.o(.text) referenced from startup_mkv31f51212.o(.isr_vector)
 <LI><a href="#[46]">PORTB_IRQHandler</a> from startup_mkv31f51212.o(.text) referenced from startup_mkv31f51212.o(.isr_vector)
 <LI><a href="#[47]">PORTC_IRQHandler</a> from startup_mkv31f51212.o(.text) referenced from startup_mkv31f51212.o(.isr_vector)
 <LI><a href="#[48]">PORTD_IRQHandler</a> from startup_mkv31f51212.o(.text) referenced from startup_mkv31f51212.o(.isr_vector)
 <LI><a href="#[49]">PORTE_IRQHandler</a> from startup_mkv31f51212.o(.text) referenced from startup_mkv31f51212.o(.isr_vector)
 <LI><a href="#[8]">PendSV_Handler</a> from startup_mkv31f51212.o(.text) referenced from startup_mkv31f51212.o(.isr_vector)
 <LI><a href="#[8]">PendSV_Handler</a> from startup_mkv31f51212.o(.text) referenced from startup_mkv31f51212.o(.text)
 <LI><a href="#[21]">RNG_IRQHandler</a> from startup_mkv31f51212.o(.text) referenced from startup_mkv31f51212.o(.isr_vector)
 <LI><a href="#[1d]">Read_Collision_IRQHandler</a> from startup_mkv31f51212.o(.text) referenced from startup_mkv31f51212.o(.isr_vector)
 <LI><a href="#[5e]">Reserved100_IRQHandler</a> from startup_mkv31f51212.o(.text) referenced from startup_mkv31f51212.o(.isr_vector)
 <LI><a href="#[5f]">Reserved101_IRQHandler</a> from startup_mkv31f51212.o(.text) referenced from startup_mkv31f51212.o(.isr_vector)
 <LI><a href="#[26]">Reserved44_IRQHandler</a> from startup_mkv31f51212.o(.text) referenced from startup_mkv31f51212.o(.isr_vector)
 <LI><a href="#[27]">Reserved45_IRQHandler</a> from startup_mkv31f51212.o(.text) referenced from startup_mkv31f51212.o(.isr_vector)
 <LI><a href="#[2f]">Reserved53_IRQHandler</a> from startup_mkv31f51212.o(.text) referenced from startup_mkv31f51212.o(.isr_vector)
 <LI><a href="#[30]">Reserved54_IRQHandler</a> from startup_mkv31f51212.o(.text) referenced from startup_mkv31f51212.o(.isr_vector)
 <LI><a href="#[37]">Reserved61_IRQHandler</a> from startup_mkv31f51212.o(.text) referenced from startup_mkv31f51212.o(.isr_vector)
 <LI><a href="#[38]">Reserved62_IRQHandler</a> from startup_mkv31f51212.o(.text) referenced from startup_mkv31f51212.o(.isr_vector)
 <LI><a href="#[39]">Reserved63_IRQHandler</a> from startup_mkv31f51212.o(.text) referenced from startup_mkv31f51212.o(.isr_vector)
 <LI><a href="#[3f]">Reserved69_IRQHandler</a> from startup_mkv31f51212.o(.text) referenced from startup_mkv31f51212.o(.isr_vector)
 <LI><a href="#[40]">Reserved70_IRQHandler</a> from startup_mkv31f51212.o(.text) referenced from startup_mkv31f51212.o(.isr_vector)
 <LI><a href="#[41]">Reserved71_IRQHandler</a> from startup_mkv31f51212.o(.text) referenced from startup_mkv31f51212.o(.isr_vector)
 <LI><a href="#[4b]">Reserved81_IRQHandler</a> from startup_mkv31f51212.o(.text) referenced from startup_mkv31f51212.o(.isr_vector)
 <LI><a href="#[4c]">Reserved82_IRQHandler</a> from startup_mkv31f51212.o(.text) referenced from startup_mkv31f51212.o(.isr_vector)
 <LI><a href="#[4d]">Reserved83_IRQHandler</a> from startup_mkv31f51212.o(.text) referenced from startup_mkv31f51212.o(.isr_vector)
 <LI><a href="#[4e]">Reserved84_IRQHandler</a> from startup_mkv31f51212.o(.text) referenced from startup_mkv31f51212.o(.isr_vector)
 <LI><a href="#[4f]">Reserved85_IRQHandler</a> from startup_mkv31f51212.o(.text) referenced from startup_mkv31f51212.o(.isr_vector)
 <LI><a href="#[50]">Reserved86_IRQHandler</a> from startup_mkv31f51212.o(.text) referenced from startup_mkv31f51212.o(.isr_vector)
 <LI><a href="#[54]">Reserved90_IRQHandler</a> from startup_mkv31f51212.o(.text) referenced from startup_mkv31f51212.o(.isr_vector)
 <LI><a href="#[55]">Reserved91_IRQHandler</a> from startup_mkv31f51212.o(.text) referenced from startup_mkv31f51212.o(.isr_vector)
 <LI><a href="#[56]">Reserved92_IRQHandler</a> from startup_mkv31f51212.o(.text) referenced from startup_mkv31f51212.o(.isr_vector)
 <LI><a href="#[57]">Reserved93_IRQHandler</a> from startup_mkv31f51212.o(.text) referenced from startup_mkv31f51212.o(.isr_vector)
 <LI><a href="#[58]">Reserved94_IRQHandler</a> from startup_mkv31f51212.o(.text) referenced from startup_mkv31f51212.o(.isr_vector)
 <LI><a href="#[59]">Reserved95_IRQHandler</a> from startup_mkv31f51212.o(.text) referenced from startup_mkv31f51212.o(.isr_vector)
 <LI><a href="#[5a]">Reserved96_IRQHandler</a> from startup_mkv31f51212.o(.text) referenced from startup_mkv31f51212.o(.isr_vector)
 <LI><a href="#[5b]">Reserved97_IRQHandler</a> from startup_mkv31f51212.o(.text) referenced from startup_mkv31f51212.o(.isr_vector)
 <LI><a href="#[5c]">Reserved98_IRQHandler</a> from startup_mkv31f51212.o(.text) referenced from startup_mkv31f51212.o(.isr_vector)
 <LI><a href="#[5d]">Reserved99_IRQHandler</a> from startup_mkv31f51212.o(.text) referenced from startup_mkv31f51212.o(.isr_vector)
 <LI><a href="#[0]">Reset_Handler</a> from startup_mkv31f51212.o(.text) referenced from startup_mkv31f51212.o(.isr_vector)
 <LI><a href="#[76]">SPI0_DriverIRQHandler</a> from fsl_dspi.o(.text.SPI0_DriverIRQHandler) referenced from startup_mkv31f51212.o(.text)
 <LI><a href="#[24]">SPI0_IRQHandler</a> from startup_mkv31f51212.o(.text) referenced from startup_mkv31f51212.o(.isr_vector)
 <LI><a href="#[77]">SPI1_DriverIRQHandler</a> from fsl_dspi.o(.text.SPI1_DriverIRQHandler) referenced from startup_mkv31f51212.o(.text)
 <LI><a href="#[25]">SPI1_IRQHandler</a> from startup_mkv31f51212.o(.text) referenced from startup_mkv31f51212.o(.isr_vector)
 <LI><a href="#[6]">SVC_Handler</a> from startup_mkv31f51212.o(.text) referenced from startup_mkv31f51212.o(.isr_vector)
 <LI><a href="#[6]">SVC_Handler</a> from startup_mkv31f51212.o(.text) referenced from startup_mkv31f51212.o(.text)
 <LI><a href="#[4a]">SWI_IRQHandler</a> from startup_mkv31f51212.o(.text) referenced from startup_mkv31f51212.o(.isr_vector)
 <LI><a href="#[9]">SysTick_Handler</a> from startup_mkv31f51212.o(.text) referenced from startup_mkv31f51212.o(.isr_vector)
 <LI><a href="#[9]">SysTick_Handler</a> from startup_mkv31f51212.o(.text) referenced from startup_mkv31f51212.o(.text)
 <LI><a href="#[61]">SystemInit</a> from system_mkv31f51212.o(.text.SystemInit) referenced from startup_mkv31f51212.o(.text)
 <LI><a href="#[7a]">UART0_ERR_DriverIRQHandler</a> from startup_mkv31f51212.o(.text) referenced from startup_mkv31f51212.o(.text)
 <LI><a href="#[2a]">UART0_ERR_IRQHandler</a> from startup_mkv31f51212.o(.text) referenced from startup_mkv31f51212.o(.isr_vector)
 <LI><a href="#[79]">UART0_RX_TX_DriverIRQHandler</a> from fsl_uart.o(.text.UART0_RX_TX_DriverIRQHandler) referenced from startup_mkv31f51212.o(.text)
 <LI><a href="#[29]">UART0_RX_TX_IRQHandler</a> from startup_mkv31f51212.o(.text) referenced from startup_mkv31f51212.o(.isr_vector)
 <LI><a href="#[7c]">UART1_ERR_DriverIRQHandler</a> from startup_mkv31f51212.o(.text) referenced from startup_mkv31f51212.o(.text)
 <LI><a href="#[2c]">UART1_ERR_IRQHandler</a> from startup_mkv31f51212.o(.text) referenced from startup_mkv31f51212.o(.isr_vector)
 <LI><a href="#[7b]">UART1_RX_TX_DriverIRQHandler</a> from fsl_uart.o(.text.UART1_RX_TX_DriverIRQHandler) referenced from startup_mkv31f51212.o(.text)
 <LI><a href="#[2b]">UART1_RX_TX_IRQHandler</a> from startup_mkv31f51212.o(.text) referenced from startup_mkv31f51212.o(.isr_vector)
 <LI><a href="#[7e]">UART2_ERR_DriverIRQHandler</a> from startup_mkv31f51212.o(.text) referenced from startup_mkv31f51212.o(.text)
 <LI><a href="#[2e]">UART2_ERR_IRQHandler</a> from startup_mkv31f51212.o(.text) referenced from startup_mkv31f51212.o(.isr_vector)
 <LI><a href="#[7d]">UART2_RX_TX_DriverIRQHandler</a> from fsl_uart.o(.text.UART2_RX_TX_DriverIRQHandler) referenced from startup_mkv31f51212.o(.text)
 <LI><a href="#[2d]">UART2_RX_TX_IRQHandler</a> from startup_mkv31f51212.o(.text) referenced from startup_mkv31f51212.o(.isr_vector)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_mkv31f51212.o(.text) referenced from startup_mkv31f51212.o(.isr_vector)
 <LI><a href="#[20]">WDOG_EWM_IRQHandler</a> from startup_mkv31f51212.o(.text) referenced from startup_mkv31f51212.o(.isr_vector)
 <LI><a href="#[62]">__main</a> from __main.o(!!!main) referenced from startup_mkv31f51212.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[62]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.text)
</UL>
<P><STRONG><a name="[80]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[82]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[e7]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[e8]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[83]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[e9]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[87]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[84]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[ea]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[eb]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[ec]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[ed]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[ee]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[ef]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[f0]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[f1]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[f2]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[f3]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[f4]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[f5]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[f6]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[f7]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[f8]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[f9]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[fa]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[fb]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[fc]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[fd]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[8c]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[fe]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[ff]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[100]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[101]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[102]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[103]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[104]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[81]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[105]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[106]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry7.o(.ARM.Collect$$rtentry$$00000007))

<P><STRONG><a name="[86]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[107]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[88]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; FTM_SetupPwm &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[108]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[92]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[8b]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[109]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[8d]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, startup_mkv31f51212.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.isr_vector)
</UL>
<P><STRONG><a name="[31]"></a>ADC0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mkv31f51212.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefaultISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.isr_vector)
</UL>
<P><STRONG><a name="[53]"></a>ADC1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mkv31f51212.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.isr_vector)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mkv31f51212.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.isr_vector)
</UL>
<P><STRONG><a name="[32]"></a>CMP0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mkv31f51212.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.isr_vector)
</UL>
<P><STRONG><a name="[33]"></a>CMP1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mkv31f51212.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.isr_vector)
</UL>
<P><STRONG><a name="[42]"></a>DAC0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mkv31f51212.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.isr_vector)
</UL>
<P><STRONG><a name="[52]"></a>DAC1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mkv31f51212.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.isr_vector)
</UL>
<P><STRONG><a name="[73]"></a>DMA_Error_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mkv31f51212.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.text)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mkv31f51212.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.isr_vector)
</UL>
<P><STRONG><a name="[60]"></a>DefaultISR</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mkv31f51212.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_IRQHandler
</UL>
<BR>[Address Reference Count : 3]<UL><LI> fsl_uart.o(.data.s_uartIsr)
<LI> fsl_lpuart.o(.data.s_lpuartIsr)
<LI> startup_mkv31f51212.o(.isr_vector)
</UL>
<P><STRONG><a name="[1c]"></a>FTF_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mkv31f51212.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.isr_vector)
</UL>
<P><STRONG><a name="[34]"></a>FTM0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mkv31f51212.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.isr_vector)
</UL>
<P><STRONG><a name="[35]"></a>FTM1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mkv31f51212.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.isr_vector)
</UL>
<P><STRONG><a name="[36]"></a>FTM2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mkv31f51212.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.isr_vector)
</UL>
<P><STRONG><a name="[74]"></a>I2C0_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mkv31f51212.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.text)
</UL>
<P><STRONG><a name="[75]"></a>I2C1_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mkv31f51212.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.text)
</UL>
<P><STRONG><a name="[1f]"></a>LLWU_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mkv31f51212.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.isr_vector)
</UL>
<P><STRONG><a name="[44]"></a>LPTMR0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mkv31f51212.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.isr_vector)
</UL>
<P><STRONG><a name="[1e]"></a>LVD_LVW_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mkv31f51212.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.isr_vector)
</UL>
<P><STRONG><a name="[43]"></a>MCG_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mkv31f51212.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.isr_vector)
</UL>
<P><STRONG><a name="[1b]"></a>MCM_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mkv31f51212.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.isr_vector)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mkv31f51212.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.isr_vector)
</UL>
<P><STRONG><a name="[3e]"></a>PDB0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mkv31f51212.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.isr_vector)
</UL>
<P><STRONG><a name="[3a]"></a>PIT0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mkv31f51212.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.isr_vector)
</UL>
<P><STRONG><a name="[3b]"></a>PIT1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mkv31f51212.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.isr_vector)
</UL>
<P><STRONG><a name="[3c]"></a>PIT2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mkv31f51212.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.isr_vector)
</UL>
<P><STRONG><a name="[3d]"></a>PIT3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mkv31f51212.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.isr_vector)
</UL>
<P><STRONG><a name="[45]"></a>PORTA_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mkv31f51212.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.isr_vector)
</UL>
<P><STRONG><a name="[46]"></a>PORTB_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mkv31f51212.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.isr_vector)
</UL>
<P><STRONG><a name="[47]"></a>PORTC_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mkv31f51212.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.isr_vector)
</UL>
<P><STRONG><a name="[48]"></a>PORTD_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mkv31f51212.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.isr_vector)
</UL>
<P><STRONG><a name="[49]"></a>PORTE_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mkv31f51212.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.isr_vector)
</UL>
<P><STRONG><a name="[21]"></a>RNG_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mkv31f51212.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.isr_vector)
</UL>
<P><STRONG><a name="[1d]"></a>Read_Collision_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mkv31f51212.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.isr_vector)
</UL>
<P><STRONG><a name="[5e]"></a>Reserved100_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mkv31f51212.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.isr_vector)
</UL>
<P><STRONG><a name="[5f]"></a>Reserved101_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mkv31f51212.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.isr_vector)
</UL>
<P><STRONG><a name="[26]"></a>Reserved44_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mkv31f51212.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.isr_vector)
</UL>
<P><STRONG><a name="[27]"></a>Reserved45_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mkv31f51212.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.isr_vector)
</UL>
<P><STRONG><a name="[2f]"></a>Reserved53_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mkv31f51212.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.isr_vector)
</UL>
<P><STRONG><a name="[30]"></a>Reserved54_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mkv31f51212.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.isr_vector)
</UL>
<P><STRONG><a name="[37]"></a>Reserved61_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mkv31f51212.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.isr_vector)
</UL>
<P><STRONG><a name="[38]"></a>Reserved62_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mkv31f51212.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.isr_vector)
</UL>
<P><STRONG><a name="[39]"></a>Reserved63_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mkv31f51212.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.isr_vector)
</UL>
<P><STRONG><a name="[3f]"></a>Reserved69_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mkv31f51212.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.isr_vector)
</UL>
<P><STRONG><a name="[40]"></a>Reserved70_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mkv31f51212.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.isr_vector)
</UL>
<P><STRONG><a name="[41]"></a>Reserved71_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mkv31f51212.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.isr_vector)
</UL>
<P><STRONG><a name="[4b]"></a>Reserved81_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mkv31f51212.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.isr_vector)
</UL>
<P><STRONG><a name="[4c]"></a>Reserved82_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mkv31f51212.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.isr_vector)
</UL>
<P><STRONG><a name="[4d]"></a>Reserved83_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mkv31f51212.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.isr_vector)
</UL>
<P><STRONG><a name="[4e]"></a>Reserved84_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mkv31f51212.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.isr_vector)
</UL>
<P><STRONG><a name="[4f]"></a>Reserved85_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mkv31f51212.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.isr_vector)
</UL>
<P><STRONG><a name="[50]"></a>Reserved86_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mkv31f51212.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.isr_vector)
</UL>
<P><STRONG><a name="[54]"></a>Reserved90_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mkv31f51212.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.isr_vector)
</UL>
<P><STRONG><a name="[55]"></a>Reserved91_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mkv31f51212.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.isr_vector)
</UL>
<P><STRONG><a name="[56]"></a>Reserved92_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mkv31f51212.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.isr_vector)
</UL>
<P><STRONG><a name="[57]"></a>Reserved93_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mkv31f51212.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.isr_vector)
</UL>
<P><STRONG><a name="[58]"></a>Reserved94_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mkv31f51212.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.isr_vector)
</UL>
<P><STRONG><a name="[59]"></a>Reserved95_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mkv31f51212.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.isr_vector)
</UL>
<P><STRONG><a name="[5a]"></a>Reserved96_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mkv31f51212.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.isr_vector)
</UL>
<P><STRONG><a name="[5b]"></a>Reserved97_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mkv31f51212.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.isr_vector)
</UL>
<P><STRONG><a name="[5c]"></a>Reserved98_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mkv31f51212.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.isr_vector)
</UL>
<P><STRONG><a name="[5d]"></a>Reserved99_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mkv31f51212.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.isr_vector)
</UL>
<P><STRONG><a name="[4a]"></a>SWI_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mkv31f51212.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.isr_vector)
</UL>
<P><STRONG><a name="[7a]"></a>UART0_ERR_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mkv31f51212.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.text)
</UL>
<P><STRONG><a name="[7c]"></a>UART1_ERR_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mkv31f51212.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.text)
</UL>
<P><STRONG><a name="[7e]"></a>UART2_ERR_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mkv31f51212.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.text)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mkv31f51212.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.isr_vector)
</UL>
<P><STRONG><a name="[20]"></a>WDOG_EWM_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mkv31f51212.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.isr_vector)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mkv31f51212.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> startup_mkv31f51212.o(.text)
<LI> startup_mkv31f51212.o(.isr_vector)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mkv31f51212.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> startup_mkv31f51212.o(.text)
<LI> startup_mkv31f51212.o(.isr_vector)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mkv31f51212.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> startup_mkv31f51212.o(.text)
<LI> startup_mkv31f51212.o(.isr_vector)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mkv31f51212.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> startup_mkv31f51212.o(.text)
<LI> startup_mkv31f51212.o(.isr_vector)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mkv31f51212.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> startup_mkv31f51212.o(.text)
<LI> startup_mkv31f51212.o(.isr_vector)
</UL>
<P><STRONG><a name="[a]"></a>DMA0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mkv31f51212.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.isr_vector)
</UL>
<P><STRONG><a name="[b]"></a>DMA1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mkv31f51212.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.isr_vector)
</UL>
<P><STRONG><a name="[c]"></a>DMA2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mkv31f51212.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.isr_vector)
</UL>
<P><STRONG><a name="[d]"></a>DMA3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mkv31f51212.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.isr_vector)
</UL>
<P><STRONG><a name="[e]"></a>DMA4_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mkv31f51212.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.isr_vector)
</UL>
<P><STRONG><a name="[f]"></a>DMA5_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mkv31f51212.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.isr_vector)
</UL>
<P><STRONG><a name="[10]"></a>DMA6_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mkv31f51212.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.isr_vector)
</UL>
<P><STRONG><a name="[11]"></a>DMA7_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mkv31f51212.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.isr_vector)
</UL>
<P><STRONG><a name="[12]"></a>DMA8_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mkv31f51212.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.isr_vector)
</UL>
<P><STRONG><a name="[13]"></a>DMA9_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mkv31f51212.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.isr_vector)
</UL>
<P><STRONG><a name="[14]"></a>DMA10_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mkv31f51212.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.isr_vector)
</UL>
<P><STRONG><a name="[15]"></a>DMA11_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mkv31f51212.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.isr_vector)
</UL>
<P><STRONG><a name="[16]"></a>DMA12_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mkv31f51212.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.isr_vector)
</UL>
<P><STRONG><a name="[17]"></a>DMA13_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mkv31f51212.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.isr_vector)
</UL>
<P><STRONG><a name="[18]"></a>DMA14_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mkv31f51212.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.isr_vector)
</UL>
<P><STRONG><a name="[19]"></a>DMA15_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mkv31f51212.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.isr_vector)
</UL>
<P><STRONG><a name="[1a]"></a>DMA_Error_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mkv31f51212.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.isr_vector)
</UL>
<P><STRONG><a name="[22]"></a>I2C0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mkv31f51212.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.isr_vector)
</UL>
<P><STRONG><a name="[23]"></a>I2C1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mkv31f51212.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.isr_vector)
</UL>
<P><STRONG><a name="[24]"></a>SPI0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mkv31f51212.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.isr_vector)
</UL>
<P><STRONG><a name="[25]"></a>SPI1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mkv31f51212.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.isr_vector)
</UL>
<P><STRONG><a name="[28]"></a>LPUART0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mkv31f51212.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.isr_vector)
</UL>
<P><STRONG><a name="[29]"></a>UART0_RX_TX_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mkv31f51212.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.isr_vector)
</UL>
<P><STRONG><a name="[2a]"></a>UART0_ERR_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mkv31f51212.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.isr_vector)
</UL>
<P><STRONG><a name="[2b]"></a>UART1_RX_TX_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mkv31f51212.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.isr_vector)
</UL>
<P><STRONG><a name="[2c]"></a>UART1_ERR_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mkv31f51212.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.isr_vector)
</UL>
<P><STRONG><a name="[2d]"></a>UART2_RX_TX_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mkv31f51212.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.isr_vector)
</UL>
<P><STRONG><a name="[2e]"></a>UART2_ERR_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_mkv31f51212.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.isr_vector)
</UL>
<P><STRONG><a name="[c0]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrFormatPrintf
</UL>

<P><STRONG><a name="[b2]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_GetDefaultConfig
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>

<P><STRONG><a name="[10a]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[10b]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[10c]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[8f]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[91]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
</UL>

<P><STRONG><a name="[90]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>

<P><STRONG><a name="[10d]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[10e]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[10f]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[110]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[111]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[8a]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[8e]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[93]"></a>BOARD_BootClockRUN</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, clock_config.o(.text.BOARD_BootClockRUN))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = BOARD_BootClockRUN &rArr; CLOCK_BootToPeeMode &rArr; CLOCK_SetPbeMode &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetSimConfig
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_InitOsc0
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_BootToPeeMode
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitBootClocks
</UL>

<P><STRONG><a name="[97]"></a>BOARD_InitBootClocks</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, clock_config.o(.text.BOARD_InitBootClocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = BOARD_InitBootClocks &rArr; BOARD_BootClockRUN &rArr; CLOCK_BootToPeeMode &rArr; CLOCK_SetPbeMode &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c2]"></a>BOARD_InitBootPins</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pin_mux.o(.text.BOARD_InitBootPins))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[112]"></a>BOARD_InitPins</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, pin_mux.o(.text.BOARD_InitPins), UNUSED)

<P><STRONG><a name="[95]"></a>CLOCK_BootToPeeMode</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, fsl_clock.o(.text.CLOCK_BootToPeeMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = CLOCK_BootToPeeMode &rArr; CLOCK_SetPbeMode &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetPbeMode
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetExternalRefClkConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[9b]"></a>CLOCK_EnablePll0</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_EnablePll0))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = CLOCK_EnablePll0 &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetPbeMode
</UL>

<P><STRONG><a name="[9c]"></a>CLOCK_GetEr32kClkFreq</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, fsl_clock.o(.text.CLOCK_GetEr32kClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = CLOCK_GetEr32kClkFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOsc0ErClkUndivFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[9e]"></a>CLOCK_GetFixedFreqClkFreq</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, fsl_clock.o(.text.CLOCK_GetFixedFreqClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = CLOCK_GetFixedFreqClkFreq &rArr; CLOCK_GetOutClkFreq &rArr; CLOCK_GetFllFreq &rArr; CLOCK_GetFllRefClkFreq &rArr; CLOCK_GetMcgExtClkFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFllRefClkFreq
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOutClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[a1]"></a>CLOCK_GetFllFreq</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, fsl_clock.o(.text.CLOCK_GetFllFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = CLOCK_GetFllFreq &rArr; CLOCK_GetFllRefClkFreq &rArr; CLOCK_GetMcgExtClkFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFllRefClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFllSelClkFreq
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOutClkFreq
</UL>

<P><STRONG><a name="[a3]"></a>CLOCK_GetFreq</STRONG> (Thumb, 184 bytes, Stack size 8 bytes, fsl_clock.o(.text.CLOCK_GetFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = CLOCK_GetFreq &rArr; CLOCK_GetFixedFreqClkFreq &rArr; CLOCK_GetOutClkFreq &rArr; CLOCK_GetFllFreq &rArr; CLOCK_GetFllRefClkFreq &rArr; CLOCK_GetMcgExtClkFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFllSelClkFreq
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPll0Freq
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOutClkFreq
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOsc0ErClkUndivFreq
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOsc0ErClkDivFreq
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetInternalRefClkFreq
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFllFreq
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFixedFreqClkFreq
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetEr32kClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a5]"></a>CLOCK_GetInternalRefClkFreq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_GetInternalRefClkFreq))
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetInternalRefClkSelectFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[a7]"></a>CLOCK_GetOsc0ErClkDivFreq</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_GetOsc0ErClkDivFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = CLOCK_GetOsc0ErClkDivFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[9d]"></a>CLOCK_GetOsc0ErClkUndivFreq</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_GetOsc0ErClkUndivFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = CLOCK_GetOsc0ErClkUndivFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetEr32kClkFreq
</UL>

<P><STRONG><a name="[a0]"></a>CLOCK_GetOutClkFreq</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_GetOutClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = CLOCK_GetOutClkFreq &rArr; CLOCK_GetFllFreq &rArr; CLOCK_GetFllRefClkFreq &rArr; CLOCK_GetMcgExtClkFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetMcgExtClkFreq
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetInternalRefClkSelectFreq
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPll0Freq
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFllFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFixedFreqClkFreq
</UL>

<P><STRONG><a name="[a6]"></a>CLOCK_GetPll0Freq</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, fsl_clock.o(.text.CLOCK_GetPll0Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = CLOCK_GetPll0Freq &rArr; CLOCK_GetMcgExtClkFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetMcgExtClkFreq
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPllFllSelClkFreq
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOutClkFreq
</UL>

<P><STRONG><a name="[a4]"></a>CLOCK_GetPllFllSelClkFreq</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_GetPllFllSelClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = CLOCK_GetPllFllSelClkFreq &rArr; CLOCK_GetFllFreq &rArr; CLOCK_GetFllRefClkFreq &rArr; CLOCK_GetMcgExtClkFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPll0Freq
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFllFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[94]"></a>CLOCK_InitOsc0</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, fsl_clock.o(.text.CLOCK_InitOsc0))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLOCK_InitOsc0
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[98]"></a>CLOCK_SetExternalRefClkConfig</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, fsl_clock.o(.text.CLOCK_SetExternalRefClkConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_SetExternalRefClkConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_BootToPeeMode
</UL>

<P><STRONG><a name="[99]"></a>CLOCK_SetPbeMode</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, fsl_clock.o(.text.CLOCK_SetPbeMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = CLOCK_SetPbeMode &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnablePll0
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_BootToPeeMode
</UL>

<P><STRONG><a name="[96]"></a>CLOCK_SetSimConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_SetSimConfig))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[63]"></a>DMA0_DriverIRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fsl_edma.o(.text.DMA0_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = DMA0_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.text)
</UL>
<P><STRONG><a name="[6d]"></a>DMA10_DriverIRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fsl_edma.o(.text.DMA10_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = DMA10_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.text)
</UL>
<P><STRONG><a name="[6e]"></a>DMA11_DriverIRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fsl_edma.o(.text.DMA11_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = DMA11_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.text)
</UL>
<P><STRONG><a name="[6f]"></a>DMA12_DriverIRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fsl_edma.o(.text.DMA12_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = DMA12_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.text)
</UL>
<P><STRONG><a name="[70]"></a>DMA13_DriverIRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fsl_edma.o(.text.DMA13_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = DMA13_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.text)
</UL>
<P><STRONG><a name="[71]"></a>DMA14_DriverIRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fsl_edma.o(.text.DMA14_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = DMA14_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.text)
</UL>
<P><STRONG><a name="[72]"></a>DMA15_DriverIRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fsl_edma.o(.text.DMA15_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = DMA15_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.text)
</UL>
<P><STRONG><a name="[64]"></a>DMA1_DriverIRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fsl_edma.o(.text.DMA1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = DMA1_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.text)
</UL>
<P><STRONG><a name="[65]"></a>DMA2_DriverIRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fsl_edma.o(.text.DMA2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = DMA2_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.text)
</UL>
<P><STRONG><a name="[66]"></a>DMA3_DriverIRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fsl_edma.o(.text.DMA3_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = DMA3_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.text)
</UL>
<P><STRONG><a name="[67]"></a>DMA4_DriverIRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fsl_edma.o(.text.DMA4_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = DMA4_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.text)
</UL>
<P><STRONG><a name="[68]"></a>DMA5_DriverIRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fsl_edma.o(.text.DMA5_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = DMA5_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.text)
</UL>
<P><STRONG><a name="[69]"></a>DMA6_DriverIRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fsl_edma.o(.text.DMA6_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = DMA6_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.text)
</UL>
<P><STRONG><a name="[6a]"></a>DMA7_DriverIRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fsl_edma.o(.text.DMA7_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = DMA7_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.text)
</UL>
<P><STRONG><a name="[6b]"></a>DMA8_DriverIRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fsl_edma.o(.text.DMA8_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = DMA8_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.text)
</UL>
<P><STRONG><a name="[6c]"></a>DMA9_DriverIRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fsl_edma.o(.text.DMA9_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = DMA9_DriverIRQHandler &rArr; EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.text)
</UL>
<P><STRONG><a name="[ad]"></a>DSPI_GetDummyDataInstance</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fsl_dspi.o(.text.DSPI_GetDummyDataInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = DSPI_GetDummyDataInstance &rArr; DSPI_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSPI_GetInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSPI_SlaveTransferHandleIRQ
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSPI_MasterTransferFillUpTxFifo
</UL>

<P><STRONG><a name="[ae]"></a>DSPI_GetInstance</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, fsl_dspi.o(.text.DSPI_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = DSPI_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSPI_GetDummyDataInstance
</UL>

<P><STRONG><a name="[ac]"></a>DSPI_MasterTransferHandleIRQ</STRONG> (Thumb, 240 bytes, Stack size 16 bytes, fsl_dspi.o(.text.DSPI_MasterTransferHandleIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = DSPI_MasterTransferHandleIRQ &rArr; DSPI_MasterTransferFillUpTxFifo &rArr; DSPI_GetDummyDataInstance &rArr; DSPI_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSPI_MasterTransferFillUpTxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSPI_CommonIRQHandler
</UL>

<P><STRONG><a name="[ab]"></a>DSPI_SlaveTransferHandleIRQ</STRONG> (Thumb, 404 bytes, Stack size 24 bytes, fsl_dspi.o(.text.DSPI_SlaveTransferHandleIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = DSPI_SlaveTransferHandleIRQ &rArr; DSPI_GetDummyDataInstance &rArr; DSPI_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSPI_GetDummyDataInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSPI_CommonIRQHandler
</UL>

<P><STRONG><a name="[b1]"></a>DbgConsole_Printf</STRONG> (Thumb, 72 bytes, Stack size 160 bytes, fsl_debug_console.o(.text.DbgConsole_Printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrFormatPrintf
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_SendDataReliable
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[b0]"></a>DbgConsole_SendDataReliable</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, fsl_debug_console.o(.text.DbgConsole_SendDataReliable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = DbgConsole_SendDataReliable &rArr;  __aeabi_assert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_WriteBlocking
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_PrintCallback
</UL>

<P><STRONG><a name="[a9]"></a>EDMA_HandleIRQ</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, fsl_edma.o(.text.EDMA_HandleIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = EDMA_HandleIRQ &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA9_DriverIRQHandler
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA8_DriverIRQHandler
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA7_DriverIRQHandler
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA6_DriverIRQHandler
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA5_DriverIRQHandler
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA4_DriverIRQHandler
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA3_DriverIRQHandler
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_DriverIRQHandler
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_DriverIRQHandler
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA15_DriverIRQHandler
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA14_DriverIRQHandler
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA13_DriverIRQHandler
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA12_DriverIRQHandler
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA11_DriverIRQHandler
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA10_DriverIRQHandler
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_DriverIRQHandler
</UL>

<P><STRONG><a name="[51]"></a>FTM3_IRQHandler</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, plz_work.o(.text.FTM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = FTM3_IRQHandler &rArr; FTM_UpdatePwmDutycycle &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_UpdatePwmDutycycle
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_GetStatusFlags
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_ClearStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.isr_vector)
</UL>
<P><STRONG><a name="[b7]"></a>FTM_ClearStatusFlags</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, fsl_ftm.o(.text.FTM_ClearStatusFlags))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM3_IRQHandler
</UL>

<P><STRONG><a name="[c8]"></a>FTM_EnableInterrupts</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, fsl_ftm.o(.text.FTM_EnableInterrupts))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b8]"></a>FTM_GetDefaultConfig</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, fsl_ftm.o(.text.FTM_GetDefaultConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = FTM_GetDefaultConfig &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b6]"></a>FTM_GetStatusFlags</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fsl_ftm.o(.text.FTM_GetStatusFlags))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM3_IRQHandler
</UL>

<P><STRONG><a name="[ba]"></a>FTM_Init</STRONG> (Thumb, 528 bytes, Stack size 40 bytes, fsl_ftm.o(.text.FTM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = FTM_Init &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_GetInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bb]"></a>FTM_SetupPwm</STRONG> (Thumb, 640 bytes, Stack size 56 bytes, fsl_ftm.o(.text.FTM_SetupPwm))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = FTM_SetupPwm &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b5]"></a>FTM_UpdatePwmDutycycle</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, fsl_ftm.o(.text.FTM_UpdatePwmDutycycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = FTM_UpdatePwmDutycycle &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM3_IRQHandler
</UL>

<P><STRONG><a name="[bc]"></a>HAL_UartSendBlocking</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, uart_adapter.o(.text.HAL_UartSendBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = HAL_UartSendBlocking &rArr;  __aeabi_assert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WriteBlocking
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_UartWrite
</UL>

<P><STRONG><a name="[78]"></a>LPUART0_DriverIRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, fsl_lpuart.o(.text.LPUART0_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPUART0_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.text)
</UL>
<P><STRONG><a name="[76]"></a>SPI0_DriverIRQHandler</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, fsl_dspi.o(.text.SPI0_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = SPI0_DriverIRQHandler &rArr; DSPI_CommonIRQHandler &rArr; DSPI_MasterTransferHandleIRQ &rArr; DSPI_MasterTransferFillUpTxFifo &rArr; DSPI_GetDummyDataInstance &rArr; DSPI_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSPI_CommonIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.text)
</UL>
<P><STRONG><a name="[77]"></a>SPI1_DriverIRQHandler</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, fsl_dspi.o(.text.SPI1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = SPI1_DriverIRQHandler &rArr; DSPI_CommonIRQHandler &rArr; DSPI_MasterTransferHandleIRQ &rArr; DSPI_MasterTransferFillUpTxFifo &rArr; DSPI_GetDummyDataInstance &rArr; DSPI_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSPI_CommonIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.text)
</UL>
<P><STRONG><a name="[b4]"></a>SerialManager_WriteBlocking</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, serial_manager.o(.text.SerialManager_WriteBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = SerialManager_WriteBlocking &rArr;  __aeabi_assert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_UartWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_SendDataReliable
</UL>

<P><STRONG><a name="[be]"></a>Serial_UartWrite</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, serial_port_uart.o(.text.Serial_UartWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = Serial_UartWrite &rArr;  __aeabi_assert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartSendBlocking
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_WriteBlocking
</UL>

<P><STRONG><a name="[b3]"></a>StrFormatPrintf</STRONG> (Thumb, 524 bytes, Stack size 104 bytes, fsl_str.o(.text.StrFormatPrintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertRadixNumToString
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>

<P><STRONG><a name="[61]"></a>SystemInit</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, system_mkv31f51212.o(.text.SystemInit))
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInitHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.text)
</UL>
<P><STRONG><a name="[c1]"></a>SystemInitHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_mkv31f51212.o(.text.SystemInitHook))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[79]"></a>UART0_RX_TX_DriverIRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, fsl_uart.o(.text.UART0_RX_TX_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART0_RX_TX_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.text)
</UL>
<P><STRONG><a name="[7b]"></a>UART1_RX_TX_DriverIRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, fsl_uart.o(.text.UART1_RX_TX_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART1_RX_TX_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.text)
</UL>
<P><STRONG><a name="[7d]"></a>UART2_RX_TX_DriverIRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, fsl_uart.o(.text.UART2_RX_TX_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART2_RX_TX_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkv31f51212.o(.text)
</UL>
<P><STRONG><a name="[bd]"></a>UART_WriteBlocking</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, fsl_uart.o(.text.UART_WriteBlocking))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartSendBlocking
</UL>

<P><STRONG><a name="[9a]"></a>__aeabi_assert</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, fsl_assert.o(.text.__aeabi_assert))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetMcgExtClkFreq
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_UpdatePwmDutycycle
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_SetupPwm
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_Init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_GetDefaultConfig
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_DriverIRQHandler
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_DriverIRQHandler
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSPI_SlaveTransferHandleIRQ
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSPI_MasterTransferHandleIRQ
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSPI_GetInstance
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSPI_MasterTransferFillUpTxFifo
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetPbeMode
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPll0Freq
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOsc0ErClkUndivFreq
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOsc0ErClkDivFreq
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetEr32kClkFreq
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnablePll0
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_BootToPeeMode
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EDMA_HandleIRQ
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_GetInstance
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartSendBlocking
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_SendDataReliable
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_UartWrite
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager_WriteBlocking
</UL>

<P><STRONG><a name="[89]"></a>main</STRONG> (Thumb, 304 bytes, Stack size 48 bytes, plz_work.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = main &rArr; FTM_SetupPwm &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_SetupPwm
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_Init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_GetDefaultConfig
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_EnableInterrupts
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitBootPins
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitBootClocks
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[d7]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[c5]"></a>__hardfp_sin</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, sin.o(i.__hardfp_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cb]"></a>__ieee754_rem_pio2</STRONG> (Thumb, 938 bytes, Stack size 120 bytes, rred.o(i.__ieee754_rem_pio2))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __ieee754_rem_pio2 &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
</UL>

<P><STRONG><a name="[cc]"></a>__kernel_cos</STRONG> (Thumb, 322 bytes, Stack size 64 bytes, cos_i.o(i.__kernel_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = __kernel_cos &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
</UL>

<P><STRONG><a name="[d6]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[ce]"></a>__kernel_sin</STRONG> (Thumb, 280 bytes, Stack size 72 bytes, sin_i.o(i.__kernel_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __kernel_sin &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
</UL>

<P><STRONG><a name="[ca]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __mathlib_dbl_infnan &rArr; __aeabi_dadd
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
</UL>

<P><STRONG><a name="[c9]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
</UL>

<P><STRONG><a name="[d8]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_underflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[d1]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[cd]"></a>__aeabi_dneg</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, basic.o(x$fpl$basic))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
</UL>

<P><STRONG><a name="[113]"></a>_dneg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[114]"></a>__aeabi_fneg</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[115]"></a>_fneg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[116]"></a>_dabs</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[117]"></a>_fabs</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[c7]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d9]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[d0]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
</UL>

<P><STRONG><a name="[dc]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[c4]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
</UL>

<P><STRONG><a name="[df]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[d2]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[e0]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[d3]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[118]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[d5]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[119]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[c6]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[e1]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[db]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[de]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[d4]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[e2]"></a>_drsb</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[cf]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[e4]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[c3]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e5]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[e6]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[85]"></a>_fp_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[11a]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[11b]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[da]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[9f]"></a>CLOCK_GetFllRefClkFreq</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, fsl_clock.o(.text.CLOCK_GetFllRefClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = CLOCK_GetFllRefClkFreq &rArr; CLOCK_GetMcgExtClkFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetMcgExtClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFllFreq
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFixedFreqClkFreq
</UL>

<P><STRONG><a name="[a8]"></a>CLOCK_GetInternalRefClkSelectFreq</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_GetInternalRefClkSelectFreq))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOutClkFreq
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetInternalRefClkFreq
</UL>

<P><STRONG><a name="[a2]"></a>CLOCK_GetMcgExtClkFreq</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_GetMcgExtClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = CLOCK_GetMcgExtClkFreq &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFllRefClkFreq
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPll0Freq
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOutClkFreq
</UL>

<P><STRONG><a name="[aa]"></a>DSPI_CommonIRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, fsl_dspi.o(.text.DSPI_CommonIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = DSPI_CommonIRQHandler &rArr; DSPI_MasterTransferHandleIRQ &rArr; DSPI_MasterTransferFillUpTxFifo &rArr; DSPI_GetDummyDataInstance &rArr; DSPI_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSPI_SlaveTransferHandleIRQ
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSPI_MasterTransferHandleIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_DriverIRQHandler
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_DriverIRQHandler
</UL>

<P><STRONG><a name="[af]"></a>DSPI_MasterTransferFillUpTxFifo</STRONG> (Thumb, 276 bytes, Stack size 24 bytes, fsl_dspi.o(.text.DSPI_MasterTransferFillUpTxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = DSPI_MasterTransferFillUpTxFifo &rArr; DSPI_GetDummyDataInstance &rArr; DSPI_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSPI_GetDummyDataInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSPI_MasterTransferHandleIRQ
</UL>

<P><STRONG><a name="[b9]"></a>FTM_GetInstance</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, fsl_ftm.o(.text.FTM_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = FTM_GetInstance &rArr; __aeabi_assert &rArr; DbgConsole_Printf &rArr; StrFormatPrintf &rArr; ConvertRadixNumToString
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_Init
</UL>

<P><STRONG><a name="[7f]"></a>DbgConsole_PrintCallback</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, fsl_debug_console.o(.text.DbgConsole_PrintCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DbgConsole_PrintCallback &rArr; DbgConsole_SendDataReliable &rArr;  __aeabi_assert (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DbgConsole_SendDataReliable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsl_debug_console.o(.text.DbgConsole_Printf)
</UL>
<P><STRONG><a name="[bf]"></a>ConvertRadixNumToString</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, fsl_str.o(.text.ConvertRadixNumToString))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ConvertRadixNumToString
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrFormatPrintf
</UL>

<P><STRONG><a name="[e3]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[dd]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
